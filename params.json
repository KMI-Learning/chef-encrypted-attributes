{"name":"Chef-encrypted-attributes","tagline":"Chef plugin to add Node encrypted attributes support using client keys.","body":"# Chef-Encrypted-Attributes\r\n\r\n[![Gem Version](http://img.shields.io/gem/v/chef-encrypted-attributes.svg?style=flat)](http://badge.fury.io/rb/chef-encrypted-attributes)\r\n[![Dependency Status](http://img.shields.io/gemnasium/onddo/chef-encrypted-attributes.svg?style=flat)](https://gemnasium.com/onddo/chef-encrypted-attributes)\r\n[![Build Status](http://img.shields.io/travis/onddo/chef-encrypted-attributes/0.1.0.svg?style=flat)](https://travis-ci.org/onddo/chef-encrypted-attributes?branch=0.1.0)\r\n[![Coverage Status](http://img.shields.io/coveralls/onddo/chef-encrypted-attributes/0.1.0.svg?style=flat)](https://coveralls.io/r/onddo/chef-encrypted-attributes?branch=0.1.0)\r\n\r\n[Chef](http://www.getchef.com) plugin to add Node encrypted attributes support using client keys.\r\n\r\n## Description\r\n\r\nNode attributes are encrypted using chef client and user keys with public key infrastructure (PKI). You can choose which clients, nodes or users will be able to read the attribute.\r\n\r\nNode clients with read access can be specified using a `client_search` query. In case new nodes are added or removed, the data will be re-encrypted in the next *Chef Run* of the encrypting node (using the `#update` method shown below).\r\n\r\n## Requirements\r\n\r\n* Ruby `>= 1.9`\r\n* Chef Client `>= 11.4`\r\n* yajl-ruby `~> 1.1` (included with Chef)\r\n\r\n## Usage in Recipes\r\n\r\n### Installing and Including the Gem\r\n\r\nYou need to install and include the `chef-encrypted-attributes` gem before using encrypted attributes inside a cookbook.\r\n\r\n```ruby\r\nchef_gem \"chef-encrypted-attributes\"\r\nrequire \"chef-encrypted-attributes\"\r\n```\r\n\r\n### Typical Example\r\n\r\nIn the following example we save a simple FTP user password.\r\n\r\n```ruby\r\nchef_gem \"chef-encrypted-attributes\"\r\nrequire \"chef-encrypted-attributes\"\r\n\r\nChef::Recipe.send(:include, Opscode::OpenSSL::Password) # include the #secure_password method\r\n\r\nif Chef::EncryptedAttribute.exists?(node[\"myapp\"][\"ftp_password\"])\r\n  # update with the new keys\r\n  Chef::EncryptedAttribute.update(node.set[\"myapp\"][\"ftp_password\"])\r\n\r\n  # read the password\r\n  ftp_pass = Chef::EncryptedAttribute.load(node[\"myapp\"][\"ftp_password\"])\r\nelse\r\n  # create the password and save it\r\n  ftp_pass = secure_password\r\n  node.set[\"myapp\"][\"ftp_password\"] = Chef::EncryptedAttribute.create(ftp_pass)\r\nend\r\n\r\n# use `ftp_pass` for something here ...\r\n```\r\n\r\n**Note:** This example requires the [openssl](http://community.opscode.com/cookbooks/openssl) cookbook.\r\n\r\n### Minimal Write Only Example\r\n\r\nIn this example we only need to save some data from the local node and read it from another:\r\n\r\n```ruby\r\nchef_gem \"chef-encrypted-attributes\"\r\nrequire \"chef-encrypted-attributes\"\r\n\r\n# Allow all webapp nodes to read the attributes encrypted by me\r\nChef::Config[:encrypted_attributes][:client_search] = \"role:webapp\"\r\n\r\nif Chef::EncryptedAttribute.exists?(node[\"myapp\"][\"encrypted_data\"])\r\n  # when can used #load here as above if we need the `encrypted_data` outside this `if`\r\n\r\n  # update with the new keys\r\n  Chef::EncryptedAttribute.update(node.set[\"myapp\"][\"encrypted_data\"])\r\nelse\r\n  # create the data, encrypt and save it\r\n  data_to_encrypt = # ....\r\n  node.set[\"myapp\"][\"encrypted_data\"] = Chef::EncryptedAttribute.create(data_to_encrypt)\r\nend\r\n```\r\n\r\nThen we can read this attribute from another allowed node (a `\"role:webapp\"` node):\r\n\r\n```ruby\r\nchef_gem \"chef-encrypted-attributes\"\r\nrequire \"chef-encrypted-attributes\"\r\n\r\nif Chef::EncryptedAttribute.exists_on_node?(\"random.example.com\", [\"myapp\", \"encrypted_data\"])\r\n  data = Chef::EncryptedAttribute.load_from_node(\"random.example.com\", [\"myapp\", \"encrypted_data\"])\r\n\r\n  # use `data` for something here ...\r\nend\r\n```\r\n\r\n**Note:** Be careful when using `#exists_on_node?` and `#load_from_node` and remember passing the attribute path to read as **Array of Strings** ~~instead of using `node[...]` (which points to the local node)~~.\r\n\r\n### Example Using User Keys Data Bag\r\n\r\nSuppose we want to store users public keys in a data bag and give them access to the attributes. This can be a workaround for the [Chef Users Limitation](#chef-users-limitation) problem.\r\n\r\nYou need to create a Data Bag Item with a content similar to the following:\r\n\r\n```json\r\n{\r\n  \"id\": \"chef_users\",\r\n  \"bob\": \"-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFA...\",\r\n  \"alice\": \"-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFA...\"\r\n}\r\n```\r\n\r\nThis data bag will contain the user public keys retrieved with `knife user show USER -a public_key -f json`.\r\n\r\nThen, from a recipe, you can read this user keys and allow them to read the attributes.\r\n\r\n```ruby\r\nchef_gem \"chef-encrypted-attributes\"\r\nrequire \"chef-encrypted-attributes\"\r\n\r\nchef_users = Chef::DataBagItem.load(\"global_data_bag\", \"chef_users\")\r\nchef_users.delete(\"id\") # remove the data bag \"id\" to avoid to confuse it with a user\r\n\r\nChef::Log.debug(\"Admin users able to read the Encrypted Attributes: #{chef_users.keys.inspect}\")\r\nChef::Config[:encrypted_attributes][:keys] = chef_users.values\r\n\r\n# if Chef::EncryptedAttribute.exists_on_node?(...)\r\n#   Chef::EncryptedAttribute.update(...)\r\n# else\r\n#   node.set[...][...] = Chef::EncryptedAttribute.create(...)\r\n# ...\r\n```\r\n\r\n**Note:** This data bag does **not** need to be **encrypted**, because it only stores **public keys**.\r\n\r\n## Chef::EncryptedAttribute API\r\n\r\nSee the [API.md](https://github.com/onddo/chef-encrypted-attributes/blob/0.1.0/API.md) file for a more detailed documentation about `Chef::EncryptedAttribute` class and its methods.\r\n\r\n## Chef Users Limitation\r\n\r\nKeep in mind that, from a Chef Node, *Chef User* *public keys* are inaccessible. So you have to pass them in raw mode in the recipe if you need any *Chef User* to be able to use the encrypted attributes (this is **required for** example to use the **knife commands** included in this gem, as knife is usually used by *Chef Users*). Summarizing, Chef Node inside a recipe (using its *Chef Client* key) will not be able to retrieve the *Chef Users* *public keys*, so you need to pass them using the `[:keys]` configuration value.\r\n\r\nChef Nodes (Clients) with *admin* privileges do have access to user public keys, but in most cases this is not a recommended practice.\r\n\r\n*Chef Client* *public keys* do not have this problem, you can retrieve them from any place without limitation. You can use knife with an *Chef Admin Client* instead of a *Chef Admin User* key, but this is not common.\r\n\r\nSee the [Example Using User Keys Data Bag](#example-using-user-keys-data-bag) section for a workaround.\r\n\r\n**Note:** *Chef Clients* usually are Chef Nodes and *chef-validation*/*chef-webui* keys. *Chef Users* usually are knife users. The main difference between *Chef Users* and *Chef Clients* is that the former are able to log in via *web-ui* (has a password).\r\n\r\n## Knife Commands\r\n\r\nThere are multiple commands to read, create and modify the encrypted attributes. All the commands will grant access privileges to the affected node by default (encrypted attributes are written in Node Attributes). But you will not be allowed to access them by default, so remember to give your own knife user privileges before creating or saving the attribute.\r\n\r\nThe `ATTRIBUTE` name must be specified using *dots* notation. For example, for `node['encrypted']['attribute']`, you must specify `\"encrypted.attribute\"` as knife argument. If the attribute key has a *dot* in its name, you must escape it. For example: `\"encrypted.attribute\\.with\\.dots\"`.\r\n\r\nRead the [Chef Users Limitation](#chef-users-limitation) caveat before trying to use any knife command.\r\n\r\n### Installing the Required Gem\r\n\r\nYou need to install the `chef-encrypted-attributes` gem before using this knife commands.\r\n\r\n    $ gem install chef-encrypted-attributes\r\n\r\n### knife.rb\r\n\r\nSome configuration values can be set in your local `knife.rb` configuration file inside the `knife[:encrypted_attributes]` configuraiton space. For example:\r\n\r\n```ruby\r\nknife[:encrypted_attributes][:users] = '*' # allow access to all knife users\r\n```\r\n\r\nSee the [API Configuration](API.md#configuration) section for more configuration values.\r\n\r\n### knife encrypted attribute show\r\n\r\nShows the decrypted attribute content.\r\n\r\n    $ knife encrypted attribute show NODE ATTRIBUTE (options)\r\n\r\nFor example:\r\n\r\n    $ knife encrypted attribute show ftp.example.com myapp.ftp_password\r\n\r\n### knife encrypted attribute create\r\n\r\nCreates an encrypted attribute in a node. The attribute cannot already exist.\r\n\r\n    $ knife encrypted attribute create NODE ATTRIBUTE (options)\r\n\r\nIf the input is in JSON format (`-i`), you can create a JSON in *quirk* mode like `false`, `5` or `\"some string\"`. You don't need to create an Array or a Hash as the JSON standard forces.\r\n\r\nFor example:\r\n\r\n    $ export EDITOR=vi\r\n    $ knife encrypted attribute create ftp.example.com myapp.ftp_password \\\r\n        -U bob -U alice\r\n\r\n### knife encrypted attribute update\r\n\r\nUpdates who can read the attribute (for `:client_search` changes).\r\n\r\n    $ knife encrypted attribute update NODE ATTRIBUTE (options)\r\n\r\n**You must be careful to pass the same privilege arguments that you used in its creation** (this will surely be fixed in a future).\r\n\r\nFor example:\r\n\r\n    $ knife encrypted attribute update ftp.example.com myapp.ftp_password \\\r\n        --client-search admin:true \\\r\n        --client-search role:webapp \\\r\n        -U bob -U alice\r\n\r\n### knife encrypted attribute edit\r\n\r\nEdits an existing encrypted attribute. The attribute must exist.\r\n\r\n    $ knife encrypted attribute edit NODE ATTRIBUTE (options)\r\n\r\nIf the input is in JSON format (`-i`), you can create a JSON in *quirk* mode like `false`, `5` or `\"some string\"`. You don't need to create an Array or a Hash as the JSON standard forces.\r\n\r\n**You must be careful to pass the same privilege arguments that you used in its creation** (this will surely be fixed in a future).\r\n\r\nFor example:\r\n\r\n    $ export EDITOR=vi\r\n    $ knife encrypted attribute edit ftp.example.com myapp.ftp_password \\\r\n        --client-search admin:true \\\r\n        --client-search role:webapp \\\r\n        -U bob -U alice\r\n\r\n### knife encrypted attribute delete\r\n\r\nDeletes an existing attribute. If you have no privileges to read it, you must use the `--force` flag.\r\n\r\n    $ knife encrypted attribute delete NODE ATTRIBUTE (options)\r\n\r\nFor example:\r\n\r\n    $ knife encrypted attribute delete ftp.example.com myapp.ftp_password --force\r\n\r\n### Knife Options\r\n\r\n<table>\r\n  <tr>\r\n    <th>Short</th>\r\n    <th>Long</th>\r\n    <th>Description</th>\r\n    <th>Valid Values</th>\r\n    <th>Sub-Commands</th>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>--encrypted-attribute-version</td>\r\n    <td>Encrypted Attribute protocol version to use</td>\r\n    <td>\"0\", \"1\" <em>(default)</em></td>\r\n    <td>create, edit, update</td>\r\n  </tr>\r\n  <tr>\r\n    <td>-P</td>\r\n    <td>--disable-partial-search</td>\r\n    <td>Disable partial search</td>\r\n    <td>&nbsp;</td>\r\n    <td>create, edit, update</td>\r\n  </tr>\r\n  <tr>\r\n    <td>-C</td>\r\n    <td>--client-search</td>\r\n    <td>Client search query. Can be specified multiple times</td>\r\n    <td>&nbsp;</td>\r\n    <td>create, edit, update</td>\r\n  </tr>\r\n  <tr>\r\n    <td>-U</td>\r\n    <td>--user</td>\r\n    <td>User name to allow access to. Can be specified multiple times</td>\r\n    <td>&nbsp;</td>\r\n    <td>create, edit, update</td>\r\n  </tr>\r\n  <tr>\r\n    <td>-i</td>\r\n    <td>--input-format</td>\r\n    <td>Input (<em>EDITOR</em>) format</td>\r\n    <td>\"plain\" <em>(default)</em>, \"json\"</td>\r\n    <td>create, edit</td>\r\n  </tr>\r\n  <tr>\r\n    <td>-f</td>\r\n    <td>--force</td>\r\n    <td>Force the attribute deletion even if you cannot read it</td>\r\n    <td>&nbsp;</td>\r\n    <td>delete</td>\r\n  </tr>\r\n</table>\r\n\r\n## Internal Documentation\r\n\r\nSee the [INTERNAL.md](https://github.com/onddo/chef-encrypted-attributes/blob/0.1.0/INTERNAL.md) file for a more low level documentation.\r\n\r\n## Contributing\r\n\r\n1. Fork the repository on Github.\r\n2. Create a named feature branch (like `add_component_x`).\r\n3. Write tests for your change.\r\n4. Write your change.\r\n5. Run the tests, ensuring they all pass (try as much as possible not to reduce coverage).\r\n6. Submit a Pull Request using Github.\r\n\r\nSee the [TESTING.md](https://github.com/onddo/chef-encrypted-attributes/blob/0.1.0/TESTING.md) file to know how to run the tests properly.\r\n\r\nYou can also see the [TODO.md](https://github.com/onddo/chef-encrypted-attributes/blob/0.1.0/TODO.md) file if you're looking for inspiration.\r\n\r\n## License and Author\r\n\r\n|                      |                                          |\r\n|:---------------------|:-----------------------------------------|\r\n| **Author:**          | [Xabier de Zuazo](https://github.com/zuazo) (<xabier@onddo.com>)\r\n| **Copyright:**       | Copyright (c) 2014 Onddo Labs, SL. (www.onddo.com)\r\n| **License:**         | Apache License, Version 2.0\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n    \r\n        http://www.apache.org/licenses/LICENSE-2.0\r\n    \r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n","google":"UA-38093658-2","note":"Don't delete this file! It's used internally to help with page regeneration."}